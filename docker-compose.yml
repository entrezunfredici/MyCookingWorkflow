
services:
  traefik:
    image: traefik:v2.10
    command:
      - "--api.insecure=true"                   # Dashboard Traefik (optionnel, accessible sur :8080)
      - "--providers.docker=true"               # Active la d√©tection des containers Docker
      - "--entrypoints.web.address=:80"         # HTTP port
      #- "--entrypoints.websecure.address=:443" # HTTPS port (optionnel, si tu veux SSL)
      #- "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      #- "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      #- "--certificatesresolvers.myresolver.acme.email=ton-email@example.com"
      #- "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "8080:8080"  # Dashboard Traefik, tu peux retirer si tu veux pas exposer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # - traefik-letsencrypt:/letsencrypt # pour certif letsencrypt si besoin
    networks:
      - mcw_network

  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASS}
      POSTGRES_MCW_USER_DB: ${PG_MCW_USERS_DB}
      POSTGRES_MCW_FOOD_DB: ${PG_MCW_FOOD_DB}
      POSTGRES_MCW_TOOLS_DB: ${PG_MCW_TOOLS_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "${PG_PORT}:${INTERNAL_PG_PORT}"
    networks:
      - mcw_network

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "${PGADMIN_PORT}:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - postgres
    networks:
      - mcw_network

  api_users:
    build:
      context: ./mcw_api_users
      dockerfile: Dockerfile
    environment:
      - PG_USER=${PG_USER}
      - PG_PASS=${PG_PASS}
      - PG_DB=${PG_MCW_USERS_DB}
      - PG_PORT=${PG_PORT}
    depends_on:
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api_users.rule=Host(`api-users.localhost`)"
      - "traefik.http.services.api_users.loadbalancer.server.port=${API_USERS_PORT}"
    networks:
      - mcw_network

  api_food:
    build:
      context: ./mcw_api_food
      dockerfile: Dockerfile
    environment:
      - PG_USER=${PG_USER}
      - PG_PASS=${PG_PASS}
      - PG_DB=${PG_MCW_FOOD_DB}
      - PG_PORT=${PG_PORT}
    depends_on:
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api_food.rule=Host(`api-food.localhost`)"
      - "traefik.http.services.api_food.loadbalancer.server.port=${API_FOOD_PORT}"
    networks:
      - mcw_network

  api_tools:
    build:
      context: ./mcw_api_tools
      dockerfile: Dockerfile
    environment:
      - PG_USER=${PG_USER}
      - PG_PASS=${PG_PASS}
      - PG_DB=${PG_MCW_TOOLS_DB}
      - PG_PORT=${PG_PORT}
    depends_on:
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api_tools.rule=Host(`api-tools.localhost`)"
      - "traefik.http.services.api_tools.loadbalancer.server.port=${API_TOOLS_PORT}"
    networks:
      - mcw_network

volumes:
  postgres-data:
    driver: local
  pgadmin-data:
    driver: local

networks:
  mcw_network:
    driver: bridge
