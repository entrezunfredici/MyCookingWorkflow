version: '3.8'

services:
  traefik:
    image: traefik:v2.10
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.frontend_entrypoint.address=:${FRONTEND_PORT}"
    ports:
      - "80:80"
      - "8080:8080"
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - mcw_network

  # --- Front-end React (avec Nginx pour servir) ---
  frontend:
    build:
      context: ./mcw_front
      dockerfile: Dockerfile
    container_name: mcw_frontend
    depends_on:
      api_users:
        condition: service_healthy
      api_food:
        condition: service_healthy
      api_tools:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mcw_frontend.rule=Host(`localhost`)"
      - "traefik.http.routers.mcw_frontend.entrypoints=frontend_entrypoint"
      - "traefik.http.services.mcw_frontend.loadbalancer.server.port=80"
    networks:
      - mcw_network

  postgres_users:
    image: postgres:16
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASS}
      POSTGRES_DB: ${PG_MCW_USERS_DB}
    volumes:
      - postgres-users-data:/var/lib/postgresql/data
    ports:
      - "${PG_USERS_PORT}:5432"
    networks:
      - mcw_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgres_tools:
    image: postgres:16
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASS}
      POSTGRES_DB: ${PG_MCW_TOOLS_DB}
    volumes:
      - postgres-tools-data:/var/lib/postgresql/data
    ports:
      - "${PG_TOOLS_PORT}:5432"
    networks:
      - mcw_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgres_food:
    image: postgres:16
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASS}
      POSTGRES_DB: ${PG_MCW_FOOD_DB}
    volumes:
      - postgres-food-data:/var/lib/postgresql/data
    ports:
      - "${PG_FOOD_PORT}:5432"
    networks:
      - mcw_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "${PGADMIN_PORT}:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      postgres_users:
        condition: service_healthy
      postgres_tools:
        condition: service_healthy
      postgres_food:
        condition: service_healthy
    networks:
      - mcw_network

  api_users:
    build:
      context: ./mcw_api_users
      dockerfile: Dockerfile
    environment:
      - PG_USER=${PG_USER}
      - PG_PASS=${PG_PASS}
      - PG_DB=${PG_MCW_USERS_DB}
      - PG_HOST=postgres_users
      - PG_PORT=5432
      - API_USERS_PORT=${API_USERS_PORT}
      - ENVIRONMENT=${ENVIRONMENT}
      - JWT_SECRET=${JWT_SECRET}
      - AUTH_JWT_EXPIRES_IN=${AUTH_JWT_EXPIRES_IN}
      - VITE_FRONT_URL=http://localhost:${FRONTEND_PORT}
      - TOOLS_API_URL=http://api_tools:${API_TOOLS_PORT}
    depends_on:
      postgres_users:
        condition: service_healthy
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mcw_users.rule=Host(`mcw-users.localhost`)"
      - "traefik.http.services.mcw_users.loadbalancer.server.port=${API_USERS_PORT}"
    networks:
      - mcw_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_USERS_PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  api_food:
    build:
      context: ./mcw_api_food
      dockerfile: Dockerfile
    environment:
      - PG_USER=${PG_USER}
      - PG_PASS=${PG_PASS}
      - PG_DB=${PG_MCW_FOOD_DB}
      - PG_HOST=postgres_food
      - PG_PORT=5432
      - API_FOOD_PORT=${API_FOOD_PORT}
      - ENVIRONMENT=${ENVIRONMENT}
      - JWT_SECRET=${JWT_SECRET}
      - VITE_FRONT_URL=http://localhost:${FRONTEND_PORT}
    depends_on:
      postgres_food:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mcw_food.rule=Host(`mcw-food.localhost`)"
      - "traefik.http.services.mcw_food.loadbalancer.server.port=${API_FOOD_PORT}"
    networks:
      - mcw_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_FOOD_PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  api_tools:
    build:
      context: ./mcw_api_tools
      dockerfile: Dockerfile
    environment:
      - PG_USER=${PG_USER}
      - PG_PASS=${PG_PASS}
      - PG_DB=${PG_MCW_TOOLS_DB}
      - PG_HOST=postgres_tools
      - PG_PORT=5432
      - API_TOOLS_PORT=${API_TOOLS_PORT}
      - ENVIRONMENT=${ENVIRONMENT}
      - JWT_SECRET=${JWT_SECRET}
      - VITE_FRONT_URL=http://localhost:${FRONTEND_PORT}
    depends_on:
      postgres_tools:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mcw_tools.rule=Host(`mcw-tools.localhost`)"
      - "traefik.http.services.mcw_tools.loadbalancer.server.port=${API_TOOLS_PORT}"
    networks:
      - mcw_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_TOOLS_PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    ports:
      - "${API_TOOLS_PORT}:${API_TOOLS_PORT}"

volumes:
  postgres-users-data:
  postgres-tools-data:
  postgres-food-data:
  pgadmin-data:

networks:
  mcw_network:
    driver: bridge
